For the Sum Array issue, the different threads were all writing to a single long long int. Because of this, the threads will write over each other’s results, leading to an inaccurate sum. To fix this, I used mutex to lock the total sum for each thread until the thread’s partial sum is added to the total. By adding the mutex where I did, the rest of the partial sums can continue to be calculated without any delay. The only delay might be in adding to the total. To ensure that the code can handle sizes that are not evenly distributed among the threads, I modified the end variable for chunk size so that the last thread will handle the remainder. 
For the Matrix Multiplication code, there was no synchronization technique needed. Each thread writes to the same array, but they are writing to different rows in the array, so they have no chance of writing over one another. To ensure that the code can handle row sizes that are not evenly distributed among the threads, I modified the end_rows variable so the last thread will handle the extra rows. 
